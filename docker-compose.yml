version: '3.9'

services:
  api-gateway:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        SERVICE_NAME: api-gateway
        PORT: 3000
    environment:
      - SERVICE_NAME=api-gateway
      - PORT=3000
    ports:
      - "3000:3000"
    env_file:
      - ./dev-env
    volumes:
      - ./dev-env:/app/apps/api-gateway/.env:ro
    command: node dist/apps/api-gateway/main
    depends_on:
      - auth-server
      - event-server
    networks:
      - user-event-reward-service-network
    restart: unless-stopped

  auth-server:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        SERVICE_NAME: auth-server
        PORT: 3001
    environment:
      - SERVICE_NAME=auth-server
      - PORT=3001
    ports:
      - "3001:3001"
    env_file:
      - ./dev-env
    volumes:
      - ./dev-env:/app/apps/auth-server/.env:ro
    command: node dist/apps/auth-server/main
    depends_on:
      mongodb1:
        condition: service_healthy
      mongodb2:
        condition: service_healthy
      mongodb3:
        condition: service_healthy
    networks:
      - user-event-reward-service-network
    restart: unless-stopped

  event-server:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        SERVICE_NAME: event-server
        PORT: 3002
    environment:
      - SERVICE_NAME=event-server
      - PORT=3002
    ports:
      - "3002:3002"
    env_file:
      - ./dev-env
    volumes:
      - ./dev-env:/app/apps/event-server/.env:ro
    command: node dist/apps/event-server/main
    depends_on:
      mongodb1:
        condition: service_healthy
      mongodb2:
        condition: service_healthy
      mongodb3:
        condition: service_healthy
    networks:
      - user-event-reward-service-network
    restart: unless-stopped

  mongodb1:
    image: mongo:6.0
    container_name: mongodb1
    command: ["--replSet", "rs0", "--bind_ip_all", "--keyFile", "/etc/mongodb/mongodb-keyfile"]
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=12121212
      - MONGO_INITDB_DATABASE=user-event-reward-service-msa
    volumes:
      - mongodb1_data:/data/db
      - ./mongodb-keyfile:/etc/mongodb/mongodb-keyfile:ro
      - ./docker/mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - user-event-reward-service-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10

  mongodb2:
    image: mongo:6.0
    container_name: mongodb2
    command: ["--replSet", "rs0", "--bind_ip_all", "--keyFile", "/etc/mongodb/mongodb-keyfile"]
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=12121212
      - MONGO_INITDB_DATABASE=user-event-reward-service-msa
    volumes:
      - mongodb2_data:/data/db
      - ./mongodb-keyfile:/etc/mongodb/mongodb-keyfile:ro
    networks:
      - user-event-reward-service-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10

  mongodb3:
    image: mongo:6.0
    container_name: mongodb3
    command: ["--replSet", "rs0", "--bind_ip_all", "--keyFile", "/etc/mongodb/mongodb-keyfile"]
    ports:
      - "27019:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=12121212
      - MONGO_INITDB_DATABASE=user-event-reward-service-msa
    volumes:
      - mongodb3_data:/data/db
      - ./mongodb-keyfile:/etc/mongodb/mongodb-keyfile:ro
    networks:
      - user-event-reward-service-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10

  mongo-init:
    image: mongo:6.0
    container_name: mongo-init
    depends_on:
      - mongodb1
      - mongodb2
      - mongodb3
    command: >
      mongosh --host mongodb1:27017 -u admin -p 12121212 --authenticationDatabase admin --eval '
        rs.initiate({
          _id: "rs0",
          members: [
            { _id: 0, host: "mongodb1:27017" },
            { _id: 1, host: "mongodb2:27017" },
            { _id: 2, host: "mongodb3:27017" }
          ]
        })
      '
    networks:
      - user-event-reward-service-network

networks:
  user-event-reward-service-network:
    driver: bridge

volumes:
  mongodb1_data:
  mongodb2_data:
  mongodb3_data: 